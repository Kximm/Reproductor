@page "/"
@using PlayerBlazorApp.Models
@using PlayerBlazorApp.Services

<PageTitle>Home</PageTitle>

@* Reproductor *@

@if (!string.IsNullOrEmpty(EnlaceVideoEncontrado))
{
    <div class="d-flex justify-content-center mb-2">
        <iframe src="@EnlaceVideoEncontrado" width="800" height="400" frameborder="0" allowfullscreen></iframe>
    </div>
}
else if (!string.IsNullOrEmpty(YoutubeId))
{
    <div class="d-flex justify-content-center mb-2">
        <iframe src="@YoutubeId" width="800" height="400" frameborder="0" allowfullscreen></iframe>
    </div>
}



@* botones *@

<div class="d-flex justify-content-center mb-2">

    
    <button @onclick="First" class="btn btn-outline-warning">Primero</button>
    <button @onclick="Before" class="btn btn-outline-warning">Anterior</button>
    <button @onclick="Next" class="btn btn-outline-warning">Siguiente</button>
    <button @onclick="Last" class="btn btn-outline-warning">Final</button>
    <button @onclick="Position" class="me-2 btn btn-warning">Posicion</button>

</div>
<hr />
<div>
    <input type="number" class="form form-control m-2" @bind="posicion" />
</div>
@* para guardar *@


<div>
    <input type="text" class="form-control mb-2"placeholder="Enlace del video a agregar" @bind-value="YoutubeLink" />
    <input type="text" class="form-control mb-2 me-2" @bind-value="YoutubeLinkToAddAfter" placeholder="Enlace del video después / antes del cual deseas agregar" />
    <input type="text" class="form-control mb-2 me-2" @bind-value="YoutubeLinkToDelete" placeholder="Enlace  del video antes/despues o enlace si deseas eliminar " />
    <input type="text" class="form-control mb-2 me-2" @bind-value="YoutubeLinkToSearch" placeholder="Enlace de YouTube del video a buscar" />
</div>
<div class="d-grid gap-2 col-2 mx-auto">
    
    <button class="btn btn-outline-success" @onclick="Save">Guardar Al Inicio</button>
    <button class="btn btn-outline-success" @onclick="SaveEnd">Guardar Al Final</button>
    <button class="btn btn-outline-danger" @onclick="DeleteStart">Eliminar Al Inicio</button>
    <button class="btn btn-outline-danger" @onclick="DeleteEnd">Eliminar Al Final</button>
    <button class="btn btn-success" @onclick="SavePosition">Guardar En Posicion Espesificada</button>
    <button class="btn btn-success" @onclick="SaveAfterPosition">Guardar Después de la Posición</button>
    <button class="btn btn-success" @onclick="SaveBeforePosition">Guardar Antes de la Posición</button>
    <button class="btn btn-success" @onclick="AddAfter">Agregar después del video</button>
    <button class="btn btn-success" @onclick="AddBefore">Agregar antes del video</button>
    <button class="btn btn-danger" @onclick="DeleteAfter">Eliminar después del video</button>
    <button class="btn btn-danger" @onclick="DeleteBefore">Eliminar antes del video</button>
    <button class="btn btn-danger" @onclick="DeleteByLink">Eliminar por link dek video</button>
    <button class="btn btn-danger" @onclick="DeleteByPosition">Eliminar por posicion</button>
    <button class="btn btn-primary" @onclick="OrdenarListaPorEnlace">Ordenar por enlace</button>
    <button class="btn btn-primary" @onclick="BuscarVideoPorEnlace">Buscar video</button>

</div>

<div>
    <button class="btn btn-primary" @onclick="ToggleRecorrido">Mostrar/ocultar recorrido recursivo</button>

    @if (MostrarRecorrido)
    {
        <p>@Recorrido</p>
    }

</div>
<p>@Mensaje</p>

@code{
    string EnlaceVideoEncontrado = string.Empty;
    DoubleLinkedList lista;
    public int posicion;
    string YoutubeLinkToDelete = string.Empty;
    string YoutubeLinkToAddAfter = string.Empty;
    string YoutubeLink = string.Empty;
    string YoutubeId = string.Empty;
    string Mensaje = string.Empty;
    string YoutubeLinkToSearch = string.Empty;
    bool MostrarRecorrido = false;
    string Recorrido = string.Empty;

    protected override void OnInitialized()
    {
        lista = new DoubleLinkedList();
    }

    void PlayVideo()
    {
        if (lista.NodoActual != null)
        {
            YoutubeLink = lista.NodoActual.Informacion;

            if (string.IsNullOrEmpty(YoutubeLink))
            {
                // Limpiar el reproductor de video si no hay enlace disponible
                YoutubeId = string.Empty;
                return;
            }

            var videoId = GetVideoId(YoutubeLink);

            if (!string.IsNullOrEmpty(videoId))
            {
                YoutubeId = $"https://www.youtube.com/embed/{videoId}";
            }
        }
        else
        {
            // Limpiar el reproductor de video si no hay nodo actual
            YoutubeId = string.Empty;
        }


    }

    string GetVideoId(string link)
    {
        //creamos un objeto de tipo Uri
        var uri = new Uri(link);

        // obtenemos el query string del uri
        var query = uri.Query;

        // obtenemos todos los parametros del query string
        var queryparams = System.Web.HttpUtility.ParseQueryString(query);

        var videoId = queryparams["v"];

        return videoId;
    }

    void First()
    {
        lista.NodoActual = lista.PrimerNodo;
        PlayVideo();
    }
    void Position()
    {
        lista.Posicion(posicion);
        PlayVideo();
    }
    void Before()
    {
        lista.Anterior();
        PlayVideo();
    }

    void Next()
    {
        lista.Siguiente();
        PlayVideo();

    }

    void Last()
    {
        lista.NodoActual = lista.UltimoNodo;
        PlayVideo();

    }
    //----------------------------------------------------------------------------------------------------------



    void Save()
    {
        var nuevoNodo = new Nodo(YoutubeLink);

        Mensaje = lista.AgregarNodoAlInicio(nuevoNodo);

        PlayVideo();

        YoutubeLink = string.Empty;
    }

    void SaveEnd()
    {
        var nuevoNodo = new Nodo(YoutubeLink);

        Mensaje = lista.AgregarNodoAlFinal(nuevoNodo);

        PlayVideo();

        YoutubeLink = string.Empty;
    }
    void SavePosition()
    {
        var nuevonodo = new Nodo(YoutubeLink);
        Mensaje = lista.AgregarEnPosicion(posicion, nuevonodo);
        PlayVideo();
        YoutubeLink = string.Empty;
    }
    void SaveAfterPosition()
    {
        var nuevoNodo = new Nodo(YoutubeLink);
        Mensaje = lista.AgregarEnPosicion(posicion + 1, nuevoNodo); // Agrega después de la posición aumento 1
        PlayVideo();
        YoutubeLink = string.Empty;
    }


    void SaveBeforePosition()
    {
        var nuevoNodo = new Nodo(YoutubeLink);
        Mensaje = lista.AgregarEnPosicion(posicion - 1, nuevoNodo); // Agrega antes de la posición DECREMENTO 1
        PlayVideo();
        YoutubeLink = string.Empty;
    }
    void AddAfter()
    {
        if (string.IsNullOrEmpty(YoutubeLinkToAddAfter) || string.IsNullOrEmpty(YoutubeLink))
        {
            Mensaje = "Por favor, ingresa los enlaces de YouTube.";
            return;
        }

        Nodo nodoExistente = lista.BuscarPorEnlace(YoutubeLinkToAddAfter);

        if (nodoExistente == null)
        {
            Mensaje = "El video después del cual deseas agregar no se encontró en la lista.";
            return;
        }

        Nodo nuevoNodo = new Nodo(YoutubeLink);

        Mensaje = lista.AgregarDespuesDeNodo(nodoExistente, nuevoNodo);
        PlayVideo();
    }
    void AddBefore()
    {
        if (string.IsNullOrEmpty(YoutubeLinkToAddAfter) || string.IsNullOrEmpty(YoutubeLink))
        {
            Mensaje = "Por favor, ingresa los enlaces de YouTube.";
            return;
        }

        Nodo nodoExistente = lista.BuscarPorEnlace(YoutubeLinkToAddAfter);

        if (nodoExistente == null)
        {
            Mensaje = "El video antes del cual deseas agregar no se encontró en la lista.";
            return;
        }

        Nodo nuevoNodo = new Nodo(YoutubeLink);

        Mensaje = lista.AgregarAntesDeNodo(nodoExistente, nuevoNodo);
        PlayVideo();
    }
    //----------------------------------------------------------------------------------------------------------

    void DeleteEnd()
    {
        Mensaje = lista.EliminarNodoAlFinal();

        PlayVideo();

    }

    void DeleteStart()
    {
        Mensaje = lista.EliminarNodoAlInicio();

        PlayVideo();

    }
    void DeleteBefore()
    {
        if (string.IsNullOrEmpty(YoutubeLinkToDelete))
        {
            Mensaje = "Por favor, ingresa el enlace de YouTube del video antes del cual deseas eliminar un elemento.";
            return;
        }

        Nodo nodoExistente = lista.BuscarPorEnlace(YoutubeLinkToDelete);

        if (nodoExistente == null)
        {
            Mensaje = "El video antes del cual deseas eliminar un elemento no se encontró en la lista.";
            return;
        }

        Mensaje = lista.EliminarAntesDeNodo(nodoExistente);
        PlayVideo();
    }
    void DeleteAfter()
    {
        if (string.IsNullOrEmpty(YoutubeLinkToDelete))
        {
            Mensaje = "Por favor, ingresa el enlace de YouTube del video después del cual deseas eliminar un elemento.";
            return;
        }

        Nodo nodoExistente = lista.BuscarPorEnlace(YoutubeLinkToDelete);

        if (nodoExistente == null)
        {
            Mensaje = "El video después del cual deseas eliminar un elemento no se encontró en la lista.";
            return;
        }

        Mensaje = lista.EliminarDespuesDeNodo(nodoExistente);
        PlayVideo();
    }
    void DeleteByLink()
    {
        if (string.IsNullOrEmpty(YoutubeLinkToDelete))
        {
            Mensaje = "Por favor, ingresa el enlace de YouTube del elemento que deseas eliminar.";
            return;
        }

        Mensaje = lista.EliminarPorEnlace(YoutubeLinkToDelete);
        PlayVideo();
    }
    void DeleteByPosition()
    {
        if (posicion <= 0)
        {
            Mensaje = "La posición debe ser un número positivo.";
            return;
        }

        Mensaje = lista.EliminarPorPosicion(posicion);
        PlayVideo();
    }
    //-----------------------------------------------------------------------------------------------
    void OrdenarListaPorEnlace()
    {
        lista.OrdenarPorEnlace();
    }
    void BuscarVideoPorEnlace()
    {
        if (string.IsNullOrEmpty(YoutubeLinkToSearch))
        {
            Mensaje = "Por favor, ingresa el enlace de YouTube del video que deseas buscar.";
            return;
        }

        var videoId = GetVideoId(YoutubeLinkToSearch);

        if (!string.IsNullOrEmpty(videoId))
        {
            EnlaceVideoEncontrado = $"https://www.youtube.com/embed/{videoId}";
            Mensaje = "Video encontrado.";
        }
        else
        {
            Mensaje = "El enlace proporcionado no es válido.";
        }
    }
    void ToggleRecorrido()
    {
        if (MostrarRecorrido)
        {
            MostrarRecorrido = false;
            Recorrido = string.Empty;
        }
        else
        {
            MostrarRecorrido = true;
            Recorrido = lista.RecorridoRecursivo();
        }
    }



}